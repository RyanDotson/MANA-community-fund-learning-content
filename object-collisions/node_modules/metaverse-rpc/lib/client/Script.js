import { Client } from '../common/json-rpc/Client';
import { getApi } from '../common/json-rpc/API';
import { isPromiseLike } from '../common/core/isPromiseLike';
const loadAPIsNotificationName = 'LoadComponents';
const hasSymbol = typeof Symbol === 'function' && Symbol.for;
const injectedAPISymbol = hasSymbol ? Symbol('injectedAPIs') : 0xfea0;
export function inject(apiName) {
    if (apiName !== undefined && !apiName) {
        throw new TypeError('API name cannot be null / empty');
    }
    return function (target, propertyKey) {
        getInjectedAPIs(target).set(propertyKey, apiName || propertyKey);
    };
}
export function getInjectedAPIs(instance) {
    const instanceAny = instance;
    instanceAny[injectedAPISymbol] = instanceAny[injectedAPISymbol] || new Map();
    return instanceAny[injectedAPISymbol];
}
async function _injectAPIs(target) {
    const injectedMap = getInjectedAPIs(target);
    if (injectedMap.size === 0)
        return;
    await target.loadAPIs(Array.from(injectedMap.values()));
    injectedMap.forEach(function (apiName, property) {
        target[property] = target.loadedAPIs[apiName];
    });
}
export class Script extends Client {
    constructor(transport, opt) {
        super(opt);
        this.transport = transport;
        this.loadedAPIs = {};
        this.started = false;
        if (transport.onError) {
            transport.onError(e => {
                this.emit('error', e);
            });
        }
        if (transport.onClose) {
            transport.onClose(() => {
                this.emit('transportClosed');
            });
        }
        transport.onMessage(message => {
            this.processMessage(message);
        });
        if (transport.onConnect) {
            transport.onConnect(() => {
                this.didConnect();
            });
        }
        else {
            this.didConnect();
        }
    }
    sendMessage(message) {
        this.transport.sendMessage(message);
    }
    async loadAPIs(apiName) {
        const loadedKeys = Object.keys(this.loadedAPIs);
        const keysToRequest = apiName.filter(function ($) {
            return !loadedKeys.includes($);
        });
        if (keysToRequest.length) {
            await this.call(loadAPIsNotificationName, [keysToRequest]);
            keysToRequest.forEach(async (apiName) => {
                this.loadedAPIs[apiName] = getApi(this, apiName);
            });
        }
        return this.loadedAPIs;
    }
    didConnect() {
        const injection = _injectAPIs(this);
        super.didConnect();
        injection
            .then(() => {
            if (this.systemDidEnable && !this.started) {
                this.started = true;
                try {
                    const r = this.systemDidEnable();
                    if (r && isPromiseLike(r)) {
                        r.catch(e => this.emit('error', e));
                    }
                }
                catch (e) {
                    this.emit('error', e);
                }
            }
        })
            .catch(e => this.emit('error', e));
    }
}
Script.inject = inject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC9TY3JpcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ2xELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUUvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFHNUQsTUFBTSx3QkFBd0IsR0FBRyxnQkFBZ0IsQ0FBQTtBQU1qRCxNQUFNLFNBQVMsR0FBRyxPQUFPLE1BQU0sS0FBSyxVQUFVLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQTtBQUU1RCxNQUFNLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7QUFZckUsTUFBTSxpQkFBaUIsT0FBZ0I7SUFDckMsSUFBSSxPQUFPLEtBQUssU0FBUyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ3JDLE1BQU0sSUFBSSxTQUFTLENBQUMsaUNBQWlDLENBQUMsQ0FBQTtLQUN2RDtJQUNELE9BQU8sVUFBMkIsTUFBUyxFQUFFLFdBQW9CO1FBQy9ELGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLE9BQU8sSUFBSSxXQUFXLENBQUMsQ0FBQTtJQUNsRSxDQUFDLENBQUE7QUFDSCxDQUFDO0FBTUQsTUFBTSwwQkFBNEMsUUFBVztJQUMzRCxNQUFNLFdBQVcsR0FBUSxRQUFRLENBQUE7SUFDakMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsV0FBVyxDQUFDLGlCQUFpQixDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQTtJQUM1RSxPQUFPLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0FBQ3ZDLENBQUM7QUFFRCxLQUFLLHNCQUFzQixNQUFjO0lBQ3ZDLE1BQU0sV0FB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LEVBQUU7Z0JBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO2dCQUNuQixJQUFJO29CQUNGLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQTtvQkFDaEMsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUN6QixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtxQkFDcEM7aUJBQ0Y7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7aUJBQ3RCO2FBQ0Y7UUFDSCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3RDLENBQUM7O0FBcEZNLGFBQU0sR0FBRyxNQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQgfSBmcm9tICcuLi9jb21tb24vanNvbi1ycGMvQ2xpZW50J1xuaW1wb3J0IHsgZ2V0QXBpIH0gZnJvbSAnLi4vY29tbW9uL2pzb24tcnBjL0FQSSdcbmltcG9ydCB7IElMb2dPcHRzLCBTY3JpcHRpbmdUcmFuc3BvcnQgfSBmcm9tICcuLi9jb21tb24vanNvbi1ycGMvdHlwZXMnXG5pbXBvcnQgeyBpc1Byb21pc2VMaWtlIH0gZnJvbSAnLi4vY29tbW9uL2NvcmUvaXNQcm9taXNlTGlrZSdcblxuLyoqIHRoaXMgaXMgZGVmaW5lZCBpbiB0aGUgY29uc3RydWN0b3IgU2NyaXB0aW5nSG9zdCgpICovXG5jb25zdCBsb2FkQVBJc05vdGlmaWNhdGlvbk5hbWUgPSAnTG9hZENvbXBvbmVudHMnXG5cbi8vIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG5jb25zdCBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3JcblxuY29uc3QgaW5qZWN0ZWRBUElTeW1ib2wgPSBoYXNTeW1ib2wgPyBTeW1ib2woJ2luamVjdGVkQVBJcycpIDogMHhmZWEwXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NyaXB0IHtcbiAgc3lzdGVtRGlkRW5hYmxlPygpOiBQcm9taXNlPHZvaWQ+IHwgdm9pZFxufVxuXG5leHBvcnQgdHlwZSBBUEkgPSBhbnlcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGRlY29yYXRlcyBwYXJhbWV0ZXJzIHRvIGxvYWQgQVBJc1xuICogQHBhcmFtIGFwaU5hbWUgbmFtZSBvZiB0aGUgQVBJIHRvIGxvYWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdChhcGlOYW1lPzogc3RyaW5nKSB7XG4gIGlmIChhcGlOYW1lICE9PSB1bmRlZmluZWQgJiYgIWFwaU5hbWUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBUEkgbmFtZSBjYW5ub3QgYmUgbnVsbCAvIGVtcHR5JylcbiAgfVxuICByZXR1cm4gZnVuY3Rpb248VCBleHRlbmRzIFNjcmlwdD4odGFyZ2V0OiBULCBwcm9wZXJ0eUtleToga2V5b2YgVCkge1xuICAgIGdldEluamVjdGVkQVBJcyh0YXJnZXQpLnNldChwcm9wZXJ0eUtleSwgYXBpTmFtZSB8fCBwcm9wZXJ0eUtleSlcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgYWxsIHRoZSBpbmplY3RlZCBBUElzIG9mIGEgc2NyaXB0XG4gKiBAcGFyYW0gaW5zdGFuY2UgQSBzY3JpcHQgdG8gZ2V0IHRoZSBBUElzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmplY3RlZEFQSXM8VCBleHRlbmRzIFNjcmlwdD4oaW5zdGFuY2U6IFQpOiBNYXA8a2V5b2YgVCwgc3RyaW5nPiB7XG4gIGNvbnN0IGluc3RhbmNlQW55OiBhbnkgPSBpbnN0YW5jZVxuICBpbnN0YW5jZUFueVtpbmplY3RlZEFQSVN5bWJvbF0gPSBpbnN0YW5jZUFueVtpbmplY3RlZEFQSVN5bWJvbF0gfHwgbmV3IE1hcCgpXG4gIHJldHVybiBpbnN0YW5jZUFueVtpbmplY3RlZEFQSVN5bWJvbF1cbn1cblxuYXN5bmMgZnVuY3Rpb24gX2luamVjdEFQSXModGFyZ2V0OiBTY3JpcHQpIHtcbiAgY29uc3QgaW5qZWN0ZWRNYXAgPSBnZXRJbmplY3RlZEFQSXModGFyZ2V0KVxuXG4gIGlmIChpbmplY3RlZE1hcC5zaXplID09PSAwKSByZXR1cm5cblxuICBhd2FpdCB0YXJnZXQubG9hZEFQSXMoQXJyYXkuZnJvbShpbmplY3RlZE1hcC52YWx1ZXMoKSkpXG5cbiAgaW5qZWN0ZWRNYXAuZm9yRWFjaChmdW5jdGlvbihhcGlOYW1lOiBzdHJpbmcsIHByb3BlcnR5KSB7XG4gICAgdGFyZ2V0W3Byb3BlcnR5XSA9IHRhcmdldC5sb2FkZWRBUElzW2FwaU5hbWVdXG4gIH0pXG59XG5cbmV4cG9ydCBjbGFzcyBTY3JpcHQgZXh0ZW5kcyBDbGllbnQge1xuICBzdGF0aWMgaW5qZWN0ID0gaW5qZWN0XG5cbiAgbG9hZGVkQVBJczogeyBba2V5OiBzdHJpbmddOiBBUEkgfSA9IHt9XG5cbiAgcHJvdGVjdGVkIHN0YXJ0ZWQgPSBmYWxzZVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNwb3J0OiBTY3JpcHRpbmdUcmFuc3BvcnQsIG9wdD86IElMb2dPcHRzKSB7XG4gICAgc3VwZXIob3B0KVxuXG4gICAgaWYgKHRyYW5zcG9ydC5vbkVycm9yKSB7XG4gICAgICB0cmFuc3BvcnQub25FcnJvcihlID0+IHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICh0cmFuc3BvcnQub25DbG9zZSkge1xuICAgICAgdHJhbnNwb3J0Lm9uQ2xvc2UoKCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXQoJ3RyYW5zcG9ydENsb3NlZCcpXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRyYW5zcG9ydC5vbk1lc3NhZ2UobWVzc2FnZSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NNZXNzYWdlKG1lc3NhZ2UpXG4gICAgfSlcblxuICAgIGlmICh0cmFuc3BvcnQub25Db25uZWN0KSB7XG4gICAgICB0cmFuc3BvcnQub25Db25uZWN0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kaWRDb25uZWN0KClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlkQ29ubmVjdCgpXG4gICAgfVxuICB9XG5cbiAgc2VuZE1lc3NhZ2UobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZE1lc3NhZ2UobWVzc2FnZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm92aWRlIGEgZ2xvYmFsIHBvaW50IG9mIGFjY2VzcyB0byBhIHNlcnZpY2Ugd2l0aG91dFxuICAgKiBjb3VwbGluZyB1c2VycyB0byB0aGUgY29uY3JldGUgY2xhc3MgdGhhdCBpbXBsZW1lbnRzIGl0LlxuICAgKlxuICAgKiBAcGFyYW0gYXBpTmFtZSBOYW1lIG9mIHRoZSBwbHVnaW4gd2UgYXJlIHRyeWluZyB0byBvYnRhaW5cbiAgICogQHJldHVybnMge29iamVjdH0gbG9hZGVkQVBJc1xuICAgKi9cbiAgYXN5bmMgbG9hZEFQSXMoYXBpTmFtZTogc3RyaW5nW10pOiBQcm9taXNlPHsgW2tleTogc3RyaW5nXTogYW55IH0+IHtcbiAgICBjb25zdCBsb2FkZWRLZXlzID0gT2JqZWN0LmtleXModGhpcy5sb2FkZWRBUElzKVxuXG4gICAgY29uc3Qga2V5c1RvUmVxdWVzdCA9IGFwaU5hbWUuZmlsdGVyKGZ1bmN0aW9uKCQpIHtcbiAgICAgIHJldHVybiAhbG9hZGVkS2V5cy5pbmNsdWRlcygkKVxuICAgIH0pXG5cbiAgICBpZiAoa2V5c1RvUmVxdWVzdC5sZW5ndGgpIHtcbiAgICAgIGF3YWl0IHRoaXMuY2FsbChsb2FkQVBJc05vdGlmaWNhdGlvbk5hbWUsIFtrZXlzVG9SZXF1ZXN0XSlcblxuICAgICAgLy8gTG9hZCAvIHJlcXVlc3QgdGhlIEFQSVxuICAgICAga2V5c1RvUmVxdWVzdC5mb3JFYWNoKGFzeW5jIGFwaU5hbWUgPT4ge1xuICAgICAgICB0aGlzLmxvYWRlZEFQSXNbYXBpTmFtZV0gPSBnZXRBcGkodGhpcywgYXBpTmFtZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9hZGVkQVBJc1xuICB9XG5cbiAgcHJvdGVjdGVkIGRpZENvbm5lY3QoKSB7XG4gICAgY29uc3QgaW5qZWN0aW9uID0gX2luamVjdEFQSXModGhpcylcblxuICAgIHN1cGVyLmRpZENvbm5lY3QoKVxuXG4gICAgaW5qZWN0aW9uXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN5c3RlbURpZEVuYWJsZSAmJiAhdGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByID0gdGhpcy5zeXN0ZW1EaWRFbmFibGUoKVxuICAgICAgICAgICAgaWYgKHIgJiYgaXNQcm9taXNlTGlrZShyKSkge1xuICAgICAgICAgICAgICByLmNhdGNoKGUgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGUpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlKSlcbiAgfVxufVxuIl19