const hasSymbol = typeof Symbol === 'function' && Symbol.for;
const exposedMethodSymbol = hasSymbol ? Symbol('exposedMethod') : 0xfea1;
export function exposeMethod(target, propertyKey, descriptor) {
    getExposedMethods(target).add(propertyKey);
}
export function getExposedMethods(instance) {
    const instanceAny = instance;
    instanceAny[exposedMethodSymbol] = instanceAny[exposedMethodSymbol] || new Set();
    return instanceAny[exposedMethodSymbol];
}
export function rateLimit(interval = 100) {
    return function (target, propertyKey, descriptor) {
        const originalValue = descriptor.value;
        let lastCall = performance.now();
        return Object.assign({}, descriptor, { value: function () {
                const now = performance.now();
                if (now - lastCall < interval) {
                    return Promise.reject(new Error('Rate limit exceeded'));
                }
                lastCall = now;
                return originalValue.apply(this, arguments);
            } });
    };
}
export function throttle(callLimit, interval = 100) {
    return function (target, propertyKey, descriptor) {
        const originalValue = descriptor.value;
        let initTime = performance.now();
        let calls = 0;
        return Object.assign({}, descriptor, { value: function () {
                const now = performance.now();
                if (now - initTime >= interval) {
                    calls = 0;
                    initTime = now;
                }
                if (calls >= callLimit) {
                    return Promise.reject(new Error('Throttling â€“ Maximum rate exceeded'));
                }
                calls++;
                return originalValue.apply(this, arguments);
            } });
    };
}
export class API {
    constructor(options) {
        this.options = options;
        for (let methodName of getExposedMethods(this)) {
            const theMethod = this[methodName];
            if (typeof theMethod === 'function') {
                this.options.expose(methodName, theMethod.bind(this));
            }
        }
    }
    static factory(ctor, options) {
        return new ctor(options);
    }
}
API.expose = exposeMethod;
export class SubscribableAPI extends API {
}
//# sourceMappingURL=data:application/json;base64,