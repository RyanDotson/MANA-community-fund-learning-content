"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const future_1 = require("./utils/future");
exports.defer = Promise.resolve().then.bind(Promise.resolve());
/** Managed queue of dirty components to be re-rendered */
let items = [];
function enqueueRender(scene) {
    if (!scene._dirty) {
        scene._dirty = true;
        if (items.push(scene) === 1) {
            exports.defer(rerender);
        }
    }
}
function rerender() {
    let p;
    const list = items;
    items = [];
    // tslint:disable-next-line:no-conditional-assignment
    while ((p = list.pop())) {
        if (p._dirty)
            renderScriptableScene(p);
    }
}
function recursiveRender(tree) {
    if (typeof tree.tag === 'function') {
        const hoc = tree.tag;
        if (hoc.constructor && hoc.prototype) {
            throw new Error('Only pure functions are allowed');
        }
        return hoc(Object.assign({}, tree.attrs, { children: tree.children }));
    }
    return {
        tag: tree.tag,
        attrs: tree.attrs,
        children: tree.children.map(recursiveRender)
    };
}
exports.recursiveRender = recursiveRender;
/**
 * Render a ScriptableScene, triggering necessary lifecycle events and taking High-Order ScriptableScenes into account.
 * @param {ScriptableScene} scene
 * @internal
 */
function renderScriptableScene(scene, force) {
    let props = scene.props;
    let state = scene.state;
    let previousProps = scene.prevProps || props;
    let previousState = scene.prevState || state;
    let skip = false;
    const isUpdate = !!scene._component;
    // if updating
    if (isUpdate) {
        scene.props = previousProps;
        scene.state = previousState;
        if (!force && scene.shouldSceneUpdate && scene.shouldSceneUpdate(props, state) === false) {
            skip = true;
        }
        scene.props = props;
        scene.state = state;
    }
    scene.prevProps = scene.prevState = null;
    scene._dirty = false;
    if (!skip) {
        let rendererResult = scene.render(props, state);
        if (!('then' in rendererResult && 'catch' in rendererResult)) {
            rendererResult = Promise.resolve(rendererResult);
        }
        rendererResult
            .then(recursiveRender)
            .then(async (rendered) => {
            scene._component = rendered;
            if (scene.sceneDidUpdate) {
                scene.sceneDidUpdate(previousProps, previousState);
            }
            await scene.connectionFuture;
            try {
                // TODO(agus): diff/patch
                await scene.entityController.render(rendered);
            }
            catch (e) {
                if (e.message === _1.EventNames.ReplaceWholeTreeException) {
                    await scene.entityController.render(rendered);
                }
                else {
                    throw e;
                }
            }
        })
            .catch(err => {
            // tslint:disable-next-line:no-console
            console.error(err);
        });
    }
}
exports.renderScriptableScene = renderScriptableScene;
/**
 * Base Scene class.
 * Provides `setState()` and `forceUpdate()`, which trigger rendering.
 * @public
 *
 * @example
 * class MyFoo extends ScriptableScene {
 *   async render() {
 *     return <sphere />;
 *   }
 * }
 */
class ScriptableScene extends _1.Script {
    constructor() {
        super(...arguments);
        this._dirty = true;
        this.prevProps = null;
        this.prevState = null;
        this._component = null;
        this.state = {};
        this.connectionFuture = future_1.future();
    }
    /**
     * Update scene state by copying properties from `state` to `this.state`.
     * @param {object} state A hash of state properties to update with new values
     */
    setState(state) {
        let s = this.state;
        if (!this.prevState)
            this.prevState = Object.assign({}, s);
        Object.assign(s, typeof state === 'function' ? state(s, this.props) : state);
        enqueueRender(this);
    }
    /**
     * Immediately perform a synchronous re-render of the component.
     */
    forceUpdate() {
        renderScriptableScene(this, true);
    }
    async systemDidEnable() {
        this.props = (await this.entityController.getOwnAttributes());
        // we create an event subscriber
        this.eventSubscriber = new _1.EventSubscriber(this.entityController);
        this.on('SIGKILL', () => {
            if (this.sceneWillUnmount) {
                this.sceneWillUnmount();
            }
        });
        this.eventSubscriber.on(_1.EventNames.setAttributes, (newProps) => {
            this.prevProps = this.props;
            this.props = newProps.data.detail;
            enqueueRender(this);
        });
        this.connectionFuture.resolve(this);
        renderScriptableScene(this, true);
        if (this.sceneDidMount) {
            this.sceneDidMount();
        }
    }
}
__decorate([
    _1.inject('EntityController'),
    __metadata("design:type", Object)
], ScriptableScene.prototype, "entityController", void 0);
exports.ScriptableScene = ScriptableScene;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NyaXB0YWJsZVNjZW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1NjcmlwdGFibGVTY2VuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLHdCQUFrRztBQUNsRywyQ0FBdUM7QUFFMUIsUUFBQSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7QUFFbkUsMERBQTBEO0FBRTFELElBQUksS0FBSyxHQUFnQyxFQUFFLENBQUE7QUFFM0MsdUJBQTZCLEtBQTRCO0lBQ3ZELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ2pCLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFBO1FBQ25CLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0IsYUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQ2hCO0tBQ0Y7QUFDSCxDQUFDO0FBRUQ7SUFDRSxJQUFJLENBQThCLENBQUE7SUFDbEMsTUFBTSxJQUFJLEdBQXNCLEtBQUssQ0FBQTtJQUNyQyxLQUFLLEdBQUcsRUFBRSxDQUFBO0lBQ1YscURBQXFEO0lBQ3JELE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUU7UUFDdkIsSUFBSSxDQUFDLENBQUMsTUFBTTtZQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELHlCQUFnQyxJQUFxQjtJQUNuRCxJQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsS0FBSyxVQUFVLEVBQUU7UUFDbEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQWUsQ0FBQTtRQUNoQyxJQUFJLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRTtZQUNwQyxNQUFNLElBQUksS0FBSyxD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RSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7WUFDdEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO2FBQ3hCO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxhQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsUUFBcUMsRUFBRSxFQUFFO1lBQzFGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQTtZQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO1lBQ2pDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNyQixDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFbkMscUJBQXFCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRWpDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7U0FDckI7SUFDSCxDQUFDO0NBQ0Y7QUFwRTZCO0lBQTNCLFNBQU0sQ0FBQyxrQkFBa0IsQ0FBQzs7eURBQW9DO0FBRGpFLDBDQXFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjcmlwdCwgaW5qZWN0LCBFbnRpdHlDb250cm9sbGVyLCBJU2ltcGxpZmllZE5vZGUsIEV2ZW50U3Vic2NyaWJlciwgRXZlbnROYW1lcyB9IGZyb20gJy4nXG5pbXBvcnQgeyBmdXR1cmUgfSBmcm9tICcuL3V0aWxzL2Z1dHVyZSdcblxuZXhwb3J0IGNvbnN0IGRlZmVyID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXG4vKiogTWFuYWdlZCBxdWV1ZSBvZiBkaXJ0eSBjb21wb25lbnRzIHRvIGJlIHJlLXJlbmRlcmVkICovXG5cbmxldCBpdGVtczogU2NyaXB0YWJsZVNjZW5lPGFueSwgYW55PltdID0gW11cblxuZnVuY3Rpb24gZW5xdWV1ZVJlbmRlcjxELCBUPihzY2VuZTogU2NyaXB0YWJsZVNjZW5lPEQsIFQ+KSB7XG4gIGlmICghc2NlbmUuX2RpcnR5KSB7XG4gICAgc2NlbmUuX2RpcnR5ID0gdHJ1ZVxuICAgIGlmIChpdGVtcy5wdXNoKHNjZW5lKSA9PT0gMSkge1xuICAgICAgZGVmZXIocmVyZW5kZXIpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlcmVuZGVyKCkge1xuICBsZXQgcDogU2NyaXB0YWJsZVNjZW5lIHwgdW5kZWZpbmVkXG4gIGNvbnN0IGxpc3Q6IFNjcmlwdGFibGVTY2VuZVtdID0gaXRlbXNcbiAgaXRlbXMgPSBbXVxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uZGl0aW9uYWwtYXNzaWdubWVudFxuICB3aGlsZSAoKHAgPSBsaXN0LnBvcCgpKSkge1xuICAgIGlmIChwLl9kaXJ0eSkgcmVuZGVyU2NyaXB0YWJsZVNjZW5lKHApXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY3Vyc2l2ZVJlbmRlcih0cmVlOiBJU2ltcGxpZmllZE5vZGUpOiBJU2ltcGxpZmllZE5vZGUge1xuICBpZiAodHlwZW9mIHRyZWUudGFnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgaG9jID0gdHJlZS50YWcgYXMgRnVuY3Rpb25cbiAgICBpZiAoaG9jLmNvbnN0cnVjdG9yICYmIGhvYy5wcm90b3R5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBwdXJlIGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCcpXG4gICAgfVxuICAgIHJldHVybiBob2MoeyAuLi50cmVlLmF0dHJzLCBjaGlsZHJlbjogdHJlZS5jaGlsZHJlbiB9KVxuICB9XG4gIHJldHVybiB7XG4gICAgdGFnOiB0cmVlLnRhZyxcbiAgICBhdHRyczogdHJlZS5hdHRycyxcbiAgICBjaGlsZHJlbjogdHJlZS5jaGlsZHJlbi5tYXAocmVjdXJzaXZlUmVuZGVyKVxuICB9XG59XG5cbi8qKlxuICogUmVuZGVyIGEgU2NyaXB0YWJsZVNjZW5lLCB0cmlnZ2VyaW5nIG5lY2Vzc2FyeSBsaWZlY3ljbGUgZXZlbnRzIGFuZCB0YWtpbmcgSGlnaC1PcmRlciBTY3JpcHRhYmxlU2NlbmVzIGludG8gYWNjb3VudC5cbiAqIEBwYXJhbSB7U2NyaXB0YWJsZVNjZW5lfSBzY2VuZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTY3JpcHRhYmxlU2NlbmU8UHJvcHMsIFN0YXRlPihzY2VuZTogU2NyaXB0YWJsZVNjZW5lPFByb3BzLCBTdGF0ZT4sIGZvcmNlPzogYm9vbGVhbikge1xuICBsZXQgcHJvcHMgPSBzY2VuZS5wcm9wc1xuICBsZXQgc3RhdGUgPSBzY2VuZS5zdGF0ZVxuICBsZXQgcHJldmlvdXNQcm9wcyA9IHNjZW5lLnByZXZQcm9wcyB8fCBwcm9wc1xuICBsZXQgcHJldmlvdXNTdGF0ZSA9IHNjZW5lLnByZXZTdGF0ZSB8fCBzdGF0ZVxuICBsZXQgc2tpcCA9IGZhbHNlXG4gIGNvbnN0IGlzVXBkYXRlID0gISFzY2VuZS5fY29tcG9uZW50XG5cbiAgLy8gaWYgdXBkYXRpbmdcbiAgaWYgKGlzVXBkYXRlKSB7XG4gICAgc2NlbmUucHJvcHMgPSBwcmV2aW91c1Byb3BzXG4gICAgc2NlbmUuc3RhdGUgPSBwcmV2aW91c1N0YXRlXG4gICAgaWYgKCFmb3JjZSAmJiBzY2VuZS5zaG91bGRTY2VuZVVwZGF0ZSAmJiBzY2VuZS5zaG91bGRTY2VuZVVwZGF0ZShwcm9wcywgc3RhdGUpID09PSBmYWxzZSkge1xuICAgICAgc2tpcCA9IHRydWVcbiAgICB9XG4gICAgc2NlbmUucHJvcHMgPSBwcm9wc1xuICAgIHNjZW5lLnN0YXRlID0gc3RhdGVcbiAgfVxuXG4gIHNjZW5lLnByZXZQcm9wcyA9IHNjZW5lLnByZXZTdGF0ZSA9IG51bGxcbiAgc2NlbmUuX2RpcnR5ID0gZmFsc2VcblxuICBpZiAoIXNraXApIHtcbiAgICBsZXQgcmVuZGVyZXJSZXN1bHQgPSBzY2VuZS5yZW5kZXIocHJvcHMsIHN0YXRlKVxuXG4gICAgaWYgKCEoJ3RoZW4nIGluIHJlbmRlcmVyUmVzdWx0ICYmICdjYXRjaCcgaW4gcmVuZGVyZXJSZXN1bHQpKSB7XG4gICAgICByZW5kZXJlclJlc3VsdCA9IFByb21pc2UucmVzb2x2ZShyZW5kZXJlclJlc3VsdClcbiAgICB9XG5cbiAgICByZW5kZXJlclJlc3VsdFxuICAgICAgLnRoZW4ocmVjdXJzaXZlUmVuZGVyKVxuICAgICAgLnRoZW4oYXN5bmMgcmVuZGVyZWQgPT4ge1xuICAgICAgICBzY2VuZS5fY29tcG9uZW50ID0gcmVuZGVyZWRcblxuICAgICAgICBpZiAoc2NlbmUuc2NlbmVEaWRVcGRhdGUpIHtcbiAgICAgICAgICBzY2VuZS5zY2VuZURpZFVwZGF0ZShwcmV2aW91c1Byb3BzLCBwcmV2aW91c1N0YXRlKVxuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgc2NlbmUuY29ubmVjdGlvbkZ1dHVyZVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVE9ETyhhZ3VzKTogZGlmZi9wYXRjaFxuICAgICAgICAgIGF3YWl0IHNjZW5lLmVudGl0eUNvbnRyb2xsZXIucmVuZGVyKHJlbmRlcmVkKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKGUubWVzc2FnZSA9PT0gRXZlbnROYW1lcy5SZXBsYWNlV2hvbGVUcmVlRXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBhd2FpdCBzY2VuZS5lbnRpdHlDb250cm9sbGVyLnJlbmRlcihyZW5kZXJlZClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycilcbiAgICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY3JpcHRhYmxlU2NlbmU8UHJvcHMsIFN0YXRlPiB7XG4gIHByb3BzOiBQcm9wc1xuICBzdGF0ZTogU3RhdGVcblxuICAvKipcbiAgICogQ2FsbGVkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBjaGFuZ2UgaW4gcHJvcHMgYW5kIHN0YXRlIHNob3VsZCB0cmlnZ2VyIGEgcmUtcmVuZGVyLlxuICAgKlxuICAgKiBJZiBmYWxzZSBpcyByZXR1cm5lZCwgYFNjcmlwdGFibGVTY2VuZSNyZW5kZXJgLCBhbmQgYHNjZW5lRGlkVXBkYXRlYCB3aWxsIG5vdCBiZSBjYWxsZWQuXG4gICAqL1xuICBzaG91bGRTY2VuZVVwZGF0ZT8obmV4dFByb3BzOiBQcm9wcywgbmV4dFN0YXRlOiBTdGF0ZSk6IGJvb2xlYW5cblxuICAvKipcbiAgICogQ2FsbGVkIGltbWVkaWF0ZWx5IGJlZm9yZSBhIHNjZW5lIGlzIGRlc3Ryb3llZC4gUGVyZm9ybSBhbnkgbmVjZXNzYXJ5IGNsZWFudXAgaW4gdGhpcyBtZXRob2QsIHN1Y2ggYXNcbiAgICogY2FuY2VsbGVkIG5ldHdvcmsgcmVxdWVzdHMsIG9yIGNsZWFuaW5nIHVwIGFueSBlbGVtZW50cyBjcmVhdGVkIGluIGBzY2VuZURpZE1vdW50YC5cbiAgICovXG4gIHNjZW5lV2lsbFVubW91bnQ/KCk6IHZvaWRcblxuICAvKipcbiAgICogQ2FsbGVkIGltbWVkaWF0ZWx5IGFmdGVyIGEgY29tcG9tZW50IGlzIG1vdW50ZWQuIFNldHRpbmcgc3RhdGUgaGVyZSB3aWxsIHRyaWdnZXIgcmUtcmVuZGVyaW5nLlxuICAgKi9cbiAgc2NlbmVEaWRNb3VudD8oKTogdm9pZFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdXBkYXRpbmcgb2NjdXJzLiBOb3QgY2FsbGVkIGZvciB0aGUgaW5pdGlhbCByZW5kZXIuXG4gICAqL1xuICBzY2VuZURpZFVwZGF0ZT8ocHJldlByb3BzOiBSZWFkb25seTxQcm9wcz4sIHByZXZTdGF0ZTogUmVhZG9ubHk8U3RhdGU+KTogdm9pZFxufVxuXG4vKipcbiAqIEJhc2UgU2NlbmUgY2xhc3MuXG4gKiBQcm92aWRlcyBgc2V0U3RhdGUoKWAgYW5kIGBmb3JjZVVwZGF0ZSgpYCwgd2hpY2ggdHJpZ2dlciByZW5kZXJpbmcuXG4gKiBAcHVibGljXG4gKlxuICogQGV4YW1wbGVcbiAqIGNsYXNzIE15Rm9vIGV4dGVuZHMgU2NyaXB0YWJsZVNjZW5lIHtcbiAqICAgYXN5bmMgcmVuZGVyKCkge1xuICogICAgIHJldHVybiA8c3BoZXJlIC8+O1xuICogICB9XG4gKiB9XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTY3JpcHRhYmxlU2NlbmU8UHJvcHMgPSB7fSwgU3RhdGUgPSB7fT4gZXh0ZW5kcyBTY3JpcHQge1xuICBAaW5qZWN0KCdFbnRpdHlDb250cm9sbGVyJykgZW50aXR5Q29udHJvbGxlciE6IEVudGl0eUNvbnRyb2xsZXJcblxuICBldmVudFN1YnNjcmliZXIhOiBFdmVudFN1YnNjcmliZXJcblxuICBfZGlydHkgPSB0cnVlXG5cbiAgcHJldlByb3BzOiBQcm9wcyB8IG51bGwgPSBudWxsXG4gIHByZXZTdGF0ZTogU3RhdGUgfCBudWxsID0gbnVsbFxuICBfY29tcG9uZW50OiBJU2ltcGxpZmllZE5vZGUgfCBudWxsID0gbnVsbFxuXG4gIHN0YXRlOiBTdGF0ZSA9IHt9IGFzIFN0YXRlXG5cbiAgY29ubmVjdGlvbkZ1dHVyZSA9IGZ1dHVyZTxTY3JpcHQ+KClcblxuICBwcm9wcyE6IFByb3BzXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBzY2VuZSBzdGF0ZSBieSBjb3B5aW5nIHByb3BlcnRpZXMgZnJvbSBgc3RhdGVgIHRvIGB0aGlzLnN0YXRlYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIEEgaGFzaCBvZiBzdGF0ZSBwcm9wZXJ0aWVzIHRvIHVwZGF0ZSB3aXRoIG5ldyB2YWx1ZXNcbiAgICovXG4gIHNldFN0YXRlKHN0YXRlOiBQYXJ0aWFsPFN0YXRlPiB8ICgoc3RhdGU6IFN0YXRlLCBwcm9wczogUHJvcHMpID0+IFBhcnRpYWw8U3RhdGU+KSk6IHZvaWQge1xuICAgIGxldCBzID0gdGhpcy5zdGF0ZVxuICAgIGlmICghdGhpcy5wcmV2U3RhdGUpIHRoaXMucHJldlN0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgcylcbiAgICBPYmplY3QuYXNzaWduKHMsIHR5cGVvZiBzdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHN0YXRlKHMsIHRoaXMucHJvcHMpIDogc3RhdGUpXG4gICAgZW5xdWV1ZVJlbmRlcih0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIEltbWVkaWF0ZWx5IHBlcmZvcm0gYSBzeW5jaHJvbm91cyByZS1yZW5kZXIgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGZvcmNlVXBkYXRlKCkge1xuICAgIHJlbmRlclNjcmlwdGFibGVTY2VuZSh0aGlzLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEFjY2VwdHMgYHByb3BzYCBhbmQgYHN0YXRlYCwgYW5kIHJldHVybnMgYSBuZXcgVmlydHVhbCBET00gdHJlZSB0byBidWlsZC5cbiAgICogVmlydHVhbCBET00gaXMgZ2VuZXJhbGx5IGNvbnN0cnVjdGVkIHZpYSBbSlNYXShodHRwOi8vamFzb25mb3JtYXQuY29tL3d0Zi1pcy1qc3gpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgICAgUHJvcHMgKGVnOiBKU1ggYXR0cmlidXRlcykgcmVjZWl2ZWQgZnJvbSBwYXJlbnQgZWxlbWVudC9jb21wb25lbnRcbiAgICogQHBhcmFtIHtvYmplY3R9IHN0YXRlICAgIFRoZSBjb21wb25lbnQncyBjdXJyZW50IHN0YXRlXG4gICAqL1xuICBhYnN0cmFjdCBhc3luYyByZW5kZXIocHJvcHM6IFByb3BzLCBzdGF0ZTogU3RhdGUpOiBQcm9taXNlPElTaW1wbGlmaWVkTm9kZT5cblxuICBhc3luYyBzeXN0ZW1EaWRFbmFibGUoKSB7XG4gICAgdGhpcy5wcm9wcyA9IChhd2FpdCB0aGlzLmVudGl0eUNvbnRyb2xsZXIuZ2V0T3duQXR0cmlidXRlcygpKSBhcyBQcm9wc1xuXG4gICAgLy8gd2UgY3JlYXRlIGFuIGV2ZW50IHN1YnNjcmliZXJcbiAgICB0aGlzLmV2ZW50U3Vic2NyaWJlciA9IG5ldyBFdmVudFN1YnNjcmliZXIodGhpcy5lbnRpdHlDb250cm9sbGVyKVxuXG4gICAgdGhpcy5vbignU0lHS0lMTCcsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnNjZW5lV2lsbFVubW91bnQpIHtcbiAgICAgICAgdGhpcy5zY2VuZVdpbGxVbm1vdW50KClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5ldmVudFN1YnNjcmliZXIub24oRXZlbnROYW1lcy5zZXRBdHRyaWJ1dGVzLCAobmV3UHJvcHM6IHsgZGF0YTogeyBkZXRhaWw6IFByb3BzIH0gfSkgPT4ge1xuICAgICAgdGhpcy5wcmV2UHJvcHMgPSB0aGlzLnByb3BzXG4gICAgICB0aGlzLnByb3BzID0gbmV3UHJvcHMuZGF0YS5kZXRhaWxcbiAgICAgIGVucXVldWVSZW5kZXIodGhpcylcbiAgICB9KVxuXG4gICAgdGhpcy5jb25uZWN0aW9uRnV0dXJlLnJlc29sdmUodGhpcylcblxuICAgIHJlbmRlclNjcmlwdGFibGVTY2VuZSh0aGlzLCB0cnVlKVxuXG4gICAgaWYgKHRoaXMuc2NlbmVEaWRNb3VudCkge1xuICAgICAgdGhpcy5zY2VuZURpZE1vdW50KClcbiAgICB9XG4gIH1cbn1cbiJdfQ==