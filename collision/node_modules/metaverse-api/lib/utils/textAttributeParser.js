"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function parseBool(val) {
    if (val === 'true' || val === 'false') {
        return val === 'true' ? true : false;
    }
    else {
        throw new Error(`Invalid boolean: ${val}. Booleans must be true or false.`);
    }
}
/**
 * parses a triplet of numbers like "0 1 2" into a vector-like object {x:0,y:1,z:2}
 */
function parseVector3(value) {
    if (typeof value !== 'string' || value.trim().length === 0) {
        throw new Error('Expected Vector3, got: ' + JSON.stringify(value));
    }
    const parts = value.split(/\s+/);
    const vector = { x: parseFloat(parts[0]), y: parseFloat(parts[1]), z: parseFloat(parts[2]) };
    if (isFinite(vector.x) && isFinite(vector.y) && isFinite(vector.z)) {
        return vector;
    }
    else {
        throw new Error(`Invalid Vector3: ${vector.x},${vector.y},${vector.z}. From ${JSON.stringify(value)}`);
    }
}
/**
 * Parses a "key:value;key2:value2" string into a map.
 */
function parseStyle(style) {
    const dict = {};
    style.split(/;+/g).forEach(pair => {
        const parts = pair.split(':', 2);
        const key = parts[0];
        const value = parts.length === 1 ? '' : parts[1];
        if (key.length && value.length) {
            const trimmedKey = key.trim();
            const trimmedValue = value.trim();
            dict[trimmedKey] = trimmedValue;
        }
    });
    return dict;
}
/**
 * Parses a string to milliseconds.
 * @param time 1s or 1000, .5s or 500
 */
function parseTime(time) {
    if (isFinite(time))
        return parseFloat(time);
    if (time
        .toString()
        .trim()
        .endsWith('s')) {
        return parseFloat(time.replace('s', '')) * 1000;
    }
    return parseFloat(time);
}
/**
 * Receives a transition with the format
 * Transition = component duration timing? delay?
 * Transitions = Transition [, Transition]*
 * @param val
 */
function parseTransitions(val) {
    const transitionDefiniions = val.split(/\s*,\s*/);
    const coso = transitionDefiniions.reduce((acc, definition) => {
        const parts = definition.split(/\s+/);
        const component = parts[0];
        return Object.assign({}, acc, { [component]: {
                duration: parseTime(parts[1]),
                timing: parts[2] || 'linear',
                delay: parts[3] ? parseTime(parts[3]) : 0
            } });
    }, {});
    return coso;
}
const parserMappings = {
    position: parseVector3,
    rotation: parseVector3,
    scale: parseVector3,
    visible: parseBool,
    width: parseFloat,
    material: parseStyle,
    sound: parseStyle,
    transition: parseTransitions,
    skeletalAnimation: () => []
};
function camelCase(name) {
    return name.replace(/(?:-([z]))/g, function (whole, part) {
        return part.toUpperCase();
    });
}
function processAttributes(attrs, nodeName) {
    const ret = {};
    for (let i in attrs) {
        const camelCasedName = camelCase(i);
        if (i in parserMappings && typeof attrs[i] === 'string') {
            try {
                ret[camelCasedName] = parserMappings[i](attrs[i]);
            }
            catch (e) {
                // tslint:disable-next-line:no-console
                console.error(`Error parsing HTML attribute: ${i} in node ${nodeName}`, e);
            }
        }
        else {
            ret[camelCasedName] = attrs[i];
        }
    }
    return ret;
}
function processSimplifiedNode(node) {
    return Object.assign({}, node, { attrs: processAttributes(node.attrs, node.tag), children: (node.children && node.children.map(processSimplifiedNode)) || [] });
}
exports.processSimplifiedNode = processSimplifiedNode;
//# sourceMappingURL=data:application/json;base64,