import { ISimplifiedNode, Vector3Component, MaterialComponent, TransitionComponent, SkeletalAnimationComponent } from './interfaces';
declare global  {
    namespace JSX {
        type Element = ISimplifiedNode;
        type BaseEntity = {
            id?: string;
            position?: Vector3Component;
            scale?: Vector3Component | number;
            rotation?: Vector3Component;
            key?: string | number;
            visible?: boolean;
            transition?: TransitionComponent;
        };
        type MaterialEntity = BaseEntity & {
            color?: string | number;
            material?: MaterialComponent;
            width?: number;
            height?: number;
            depth?: number;
        };
        type MaterialWidthHeightEntity = MaterialEntity & {
            width?: number;
            height?: number;
            depth?: number;
        };
        type SystemEntity = BaseEntity & {
            src: string;
        };
        type GltfEntity = BaseEntity & {
            src: string;
            skeletalAnimation?: SkeletalAnimationComponent;
        };
        type ObjEntity = BaseEntity & {
            src: string;
            mtl?: string;
        };
        type CollectibleEntity = BaseEntity & {
            contractAlias: string;
            marketplaceAlias?: string;
            tokenId: string;
            amount?: number;
            currency?: number;
            buyable?: boolean;
        };
        type TextEntity = BaseEntity & {
            autoScale?: boolean;
            border?: number;
            color?: string;
            font?: string;
            fontImage?: string;
            lineCount?: number;
            opacity?: number;
            value: string;
            hAlign?: string;
            vAlign?: string;
            size?: number;
            side?: 'back' | 'front' | 'double';
        };
        type VideoEntity = BaseEntity & {
            src: string;
            height?: number;
            width?: number;
            play?: boolean;
            loop?: boolean;
            volume?: number;
        };
        interface IntrinsicElements {
            ['x-stub']: {
                boolean?: boolean;
                object?: Vector3Component;
                array?: [number, number, number];
                string?: string;
                key?: string;
            };
            ['scene']: BaseEntity;
            ['entity']: BaseEntity;
            ['box']: MaterialWidthHeightEntity;
            ['circle']: MaterialEntity & {
                segments?: number;
                thetaStart?: number;
                thetaLength?: number;
            };
            ['cone']: MaterialEntity & {
                height?: number;
                radiusTop?: number;
                radiusBottom?: number;
                segmentsRadial?: number;
                segmentsHeight?: number;
                openEnded?: boolean;
                thetaStart?: number;
                thetaLength?: number;
            };
            ['ring']: MaterialEntity & {
                radiusInner?: number;
                radiusOuter?: number;
                thetaStart?: number;
                thetaLength?: number;
                segmentsPhi?: number;
                segmentsTheta?: number;
            };
            ['gltf-model']: GltfEntity;
            ['plane']: MaterialEntity & {
                height?: number;
                width?: number;
                segmentsWidth?: number;
                segmentsHeight?: number;
            };
            ['sphere']: MaterialEntity & {
                height?: number;
                width?: number;
                radius?: number;
                phiStart?: number;
                phiLength?: number;
                thetaStart?: number;
                thetaLength?: number;
                segmentsWidth?: number;
                segmentsHeight?: number;
            };
            ['cylinder']: MaterialEntity & {
                height?: number;
                width?: number;
                radius?: number;
                radiusTop?: number;
                radiusBottom?: number;
                segmentsRadial?: number;
                segmentsHeight?: number;
                openEnded?: boolean;
                thetaStart?: number;
                thetaLength?: number;
            };
            ['system']: SystemEntity;
            ['obj-model']: ObjEntity;
            ['collectible']: CollectibleEntity;
            ['text']: TextEntity;
            ['system']: SystemEntity;
            ['video']: VideoEntity;
        }
    }
}
